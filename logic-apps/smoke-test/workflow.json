{
    "definition": {
        "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
        "actions": {
            "HTTP_-_Deactivate_DailyBuild": {
                "type": "Http",
                "inputs": {
                    "uri": "@concat(parameters('BaseURL'), '/codesystems/', parameters('shortName'))",
                    "method": "PUT",
                    "headers": {
                        "Authorization": "Basic ZGV2OmRldg=="
                    },
                    "body": {
                        "countryCode": "no",
                        "dailyBuildAvailable": false,
                        "defaultLanguageCode": "no",
                        "name": "Norwegian Edition",
                        "owner": "The Norwegian Directorate of Health"
                    }
                },
                "runAfter": {},
                "runtimeConfiguration": {
                    "contentTransfer": {
                        "transferMode": "Chunked"
                    }
                }
            },
            "HTTP_-_DailyBuild_Status": {
                "type": "Http",
                "inputs": {
                    "uri": "@concat(parameters('BaseURL'), '/codesystems/', parameters('shortName'))",
                    "method": "GET"
                },
                "runAfter": {
                    "HTTP_-_Deactivate_DailyBuild": [
                        "SUCCEEDED"
                    ]
                },
                "runtimeConfiguration": {
                    "contentTransfer": {
                        "transferMode": "Chunked"
                    }
                }
            },
            "Check_Dependency_and_DailyBuild": {
                "type": "If",
                "expression": {
                    "and": [
                        {
                            "equals": [
                                "@body('HTTP_-_DailyBuild_Status')['newConseptCount']",
                                0
                            ]
                        },
                        {
                            "equals": [
                                "@body('HTTP_-_DailyBuild_Status')['inactivatedConceptsCount']",
                                0
                            ]
                        },
                        {
                            "equals": [
                                "@body('HTTP_-_DailyBuild_Status')['reacitvatedConceptsCount']",
                                0
                            ]
                        },
                        {
                            "equals": [
                                "@body('HTTP_-_DailyBuild_Status')['changedFsnCount']",
                                0
                            ]
                        },
                        {
                            "equals": [
                                "@body('HTTP_-_DailyBuild_Status')['inactivatedSynonymsCount']",
                                0
                            ]
                        },
                        {
                            "equals": [
                                "@body('HTTP_-_DailyBuild_Status')['newSynonymsForExistingConceptsCount']",
                                0
                            ]
                        },
                        {
                            "equals": [
                                "@body('HTTP_-_DailyBuild_Status')['reactivatedSynonymsCount']",
                                0
                            ]
                        }
                    ]
                },
                "actions": {
                    "HTTP_-_Rollback": {
                        "type": "Http",
                        "inputs": {
                            "uri": "@concat(parameters('BaseURL'), '/codesystems/', parameters('shortName'), '/daily-build/rollback')",
                            "method": "POST",
                            "headers": {
                                "Authorization": "Basic ZGV2OmRldg=="
                            },
                            "body": {
                                "type": "SNAPSHOT",
                                "branchPath": "MAIN/SNOMEDCT-NO",
                                "createCodeSystemVersion": true
                            }
                        },
                        "runtimeConfiguration": {
                            "contentTransfer": {
                                "transferMode": "Chunked"
                            }
                        }
                    }
                },
                "else": {
                    "actions": {}
                },
                "runAfter": {
                    "HTTP_-_DailyBuild_Status": [
                        "SUCCEEDED"
                    ]
                }
            },
            "HTTP_Get_Authoring_Stats": {
                "type": "Http",
                "inputs": {
                    "uri": "@concat(parameters('BaseURL'), '/', parameters('branch'), '/authoring-stats')",
                    "method": "GET"
                },
                "runAfter": {
                    "Check_Dependency_and_DailyBuild": [
                        "SUCCEEDED"
                    ]
                },
                "runtimeConfiguration": {
                    "contentTransfer": {
                        "transferMode": "Chunked"
                    }
                }
            },
            "Check_Authoring_Stats": {
                "type": "If",
                "expression": {
                    "and": [
                        {
                            "equals": [
                                "@body('HTTP_Get_Authoring_Stats')['newConceptsCount']",
                                0
                            ]
                        },
                        {
                            "equals": [
                                "@body('HTTP_Get_Authoring_Stats')['inactivatedConceptsCount']",
                                ""
                            ]
                        },
                        {
                            "equals": [
                                "@body('HTTP_Get_Authoring_Stats')['inactivatedConceptsCount']",
                                ""
                            ]
                        },
                        {
                            "equals": [
                                "@body('HTTP_Get_Authoring_Stats')['changedFsnCount']",
                                ""
                            ]
                        },
                        {
                            "equals": [
                                "@body('HTTP_Get_Authoring_Stats')['newSynonymsForExistingConceptsCount']",
                                ""
                            ]
                        },
                        {
                            "equals": [
                                "@body('HTTP_Get_Authoring_Stats')['reactivatedSynonymsCount']",
                                ""
                            ]
                        }
                    ]
                },
                "actions": {},
                "else": {
                    "actions": {
                        "HTTP_Rollback": {
                            "type": "Http",
                            "inputs": {
                                "uri": "@concat(parameters('BaseURL'), '/codesystems/', parameters('shortName'), '/daily-build/rollback')",
                                "method": "POST",
                                "body": {
                                    "type": "SNAPSHOT",
                                    "branchPath": "MAIN/SNOMEDCT-NO",
                                    "createCodeSystemVersion": true
                                }
                            },
                            "runtimeConfiguration": {
                                "contentTransfer": {
                                    "transferMode": "Chunked"
                                }
                            }
                        }
                    }
                },
                "runAfter": {
                    "HTTP_Get_Authoring_Stats": [
                        "SUCCEEDED"
                    ]
                }
            },
            "HTTP_-_Initialize_new_import_job": {
                "type": "Http",
                "inputs": {
                    "uri": "@concat(parameters('BaseURL'), '/imports')",
                    "method": "POST",
                    "headers": {
                        "Authorization": "Basic ZGV2OmRldg=="
                    },
                    "body": {
                        "branchPath": "MAIN/SNOMEDCT-NO",
                        "createCodeSystemVersion": true,
                        "type": "SNAPSHOT"
                    }
                },
                "runAfter": {
                    "Check_Authoring_Stats": [
                        "SUCCEEDED"
                    ]
                },
                "runtimeConfiguration": {
                    "contentTransfer": {
                        "transferMode": "Chunked"
                    }
                }
            },
            "HTTP_-_Get_Import_Status": {
                "type": "Http",
                "inputs": {
                    "uri": "@outputs('HTTP_-_Initialize_new_import_job')?['headers']?['Location']",
                    "method": "GET"
                },
                "runAfter": {
                    "HTTP_-_Initialize_new_import_job": [
                        "SUCCEEDED"
                    ]
                },
                "runtimeConfiguration": {
                    "contentTransfer": {
                        "transferMode": "Chunked"
                    }
                }
            },
            "Condition": {
                "type": "If",
                "expression": {
                    "and": [
                        {
                            "equals": [
                                "@body('HTTP_-_Get_Import_Status')['status']",
                                "WAITING_FOR_FILE"
                            ]
                        }
                    ]
                },
                "actions": {
                    "Read_blob_content": {
                        "type": "ServiceProvider",
                        "inputs": {
                            "parameters": {
                                "containerName": "filestestrelease",
                                "blobName": "SnomedCT_ManagedServiceNO_PRODUCTION_NO1000202_20240915T120000Z.zip",
                                "inferContentType": true
                            },
                            "serviceProviderConfiguration": {
                                "connectionName": "AzureBlob",
                                "operationId": "readBlob",
                                "serviceProviderId": "/serviceProviders/AzureBlob"
                            }
                        }
                    },
                    "HTTP_-_Upload_file": {
                        "type": "Http",
                        "inputs": {
                            "uri": "@concat(outputs('HTTP_-_Initialize_new_import_job')?['headers']?['Location'], '/archive')",
                            "method": "POST",
                            "headers": {
                                "Accept": "*/*",
                                "Accept-Encoding": "gzip, deflate, br",
                                "Connection": "keep-alive",
                                "Authorization": "Basic ZGV2OmRldg==",
                                "Content-Type": "multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW"
                            },
                            "body": {
                                "$content-type": "multipart/form-data",
                                "$multipart": [
                                    {
                                        "body": "@body('Read_blob_content')?['content']",
                                        "headers": {
                                            "Content-Disposition": "form-data; name=\"file\"; filename=\"SnomedCT_ManagedServiceNO_PRODUCTION_NO1000202_20240915T120000Z.zip\"",
                                            "Content-Type": "application/x-zip-compressed"
                                        }
                                    }
                                ]
                            }
                        },
                        "runAfter": {
                            "Read_blob_content": [
                                "SUCCEEDED"
                            ]
                        },
                        "runtimeConfiguration": {
                            "contentTransfer": {
                                "transferMode": "Chunked"
                            }
                        }
                    }
                },
                "else": {
                    "actions": {}
                },
                "runAfter": {
                    "HTTP_-_Get_Import_Status": [
                        "SUCCEEDED"
                    ]
                }
            },
            "Check_if_Import_is_completed": {
                "type": "If",
                "expression": {
                    "and": [
                        {
                            "equals": [
                                "@body('HTTP_-_Get_Import_Status_After_Import')['status']",
                                "COMPLETED"
                            ]
                        }
                    ]
                },
                "actions": {
                    "Notification__-_Import_successfully_completed": {
                        "type": "ApiConnection",
                        "inputs": {
                            "host": {
                                "connection": {
                                    "referenceName": "teams"
                                }
                            },
                            "method": "post",
                            "body": {
                                "recipient": "19:515169421c1f44bb82e8af9322128bfc@thread.v2",
                                "messageBody": "<p class=\"editor-paragraph\">Smoketest : Import Successfully completed</p>"
                            },
                            "path": "/beta/teams/conversation/message/poster/Flow bot/location/@{encodeURIComponent('Group chat')}"
                        }
                    }
                },
                "else": {
                    "actions": {
                        "Check_if_failed": {
                            "type": "If",
                            "expression": {
                                "and": [
                                    {
                                        "equals": [
                                            "@body('HTTP_-_Get_Import_Status_After_Import')['status']",
                                            "FAILED"
                                        ]
                                    }
                                ]
                            },
                            "actions": {
                                "Notification_-_Import_failed": {
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "host": {
                                            "connection": {
                                                "referenceName": "teams"
                                            }
                                        },
                                        "method": "post",
                                        "body": {
                                            "recipient": "19:515169421c1f44bb82e8af9322128bfc@thread.v2",
                                            "messageBody": "<p class=\"editor-paragraph\">Smoketest : Rf2 file-Import failed</p>"
                                        },
                                        "path": "/beta/teams/conversation/message/poster/Flow bot/location/@{encodeURIComponent('Group chat')}"
                                    }
                                }
                            },
                            "else": {
                                "actions": {
                                    "Notification_-_Unknown_Error": {
                                        "type": "ApiConnection",
                                        "inputs": {
                                            "host": {
                                                "connection": {
                                                    "referenceName": "teams"
                                                }
                                            },
                                            "method": "post",
                                            "body": {
                                                "recipient": "19:515169421c1f44bb82e8af9322128bfc@thread.v2",
                                                "messageBody": "<p class=\"editor-paragraph\">Smoketest: Release process failed, current import status is @{body('HTTP_-_Get_Import_Status_After_Import')}</p>"
                                            },
                                            "path": "/beta/teams/conversation/message/poster/Flow bot/location/@{encodeURIComponent('Group chat')}"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "runAfter": {
                    "Until": [
                        "SUCCEEDED"
                    ]
                }
            },
            "Until": {
                "type": "Until",
                "expression": "@equals(body('HTTP_-_Get_Import_Status_After_Import')['status'],'')",
                "limit": {
                    "count": 10,
                    "timeout": "PT1H"
                },
                "actions": {
                    "HTTP_-_Get_Import_Status_After_Import": {
                        "type": "Http",
                        "inputs": {
                            "uri": "@outputs('HTTP_-_Initialize_new_import_job')?['headers']?['Location']",
                            "method": "GET"
                        },
                        "runtimeConfiguration": {
                            "contentTransfer": {
                                "transferMode": "Chunked"
                            }
                        }
                    },
                    "Delay": {
                        "type": "Wait",
                        "inputs": {
                            "interval": {
                                "count": 1,
                                "unit": "Minute"
                            }
                        },
                        "runAfter": {
                            "HTTP_-_Get_Import_Status_After_Import": [
                                "SUCCEEDED"
                            ]
                        }
                    }
                },
                "runAfter": {
                    "Notification_-_import_test_message": [
                        "SUCCEEDED"
                    ]
                }
            },
            "Notification_-_import_test_message": {
                "type": "ApiConnection",
                "inputs": {
                    "host": {
                        "connection": {
                            "referenceName": "teams"
                        }
                    },
                    "method": "post",
                    "body": {
                        "recipient": "19:515169421c1f44bb82e8af9322128bfc@thread.v2",
                        "messageBody": "<p class=\"editor-paragraph\">Smoketest : Rf2 imported</p>"
                    },
                    "path": "/beta/teams/conversation/message/poster/Flow bot/location/@{encodeURIComponent('Group chat')}"
                },
                "runAfter": {
                    "Condition": [
                        "SUCCEEDED"
                    ]
                }
            }
        },
        "contentVersion": "1.0.0.0",
        "outputs": {},
        "triggers": {
            "When_a_HTTP_request_is_received": {
                "type": "Request",
                "kind": "Http",
                "inputs": {
                    "method": "GET"
                }
            }
        }
    },
    "kind": "Stateful"
}